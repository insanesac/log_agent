from crewai import Agent
from model_utils import Model
from tools import json_tool

class PrepAgents(Model):
    def __init__(self):
        super().__init__()
        
    def machine_agent(self):
        return Agent(
                    role="SMT machine supervisor",
                    goal="Control and monitor the parameters, status and performance of {machine}",
                    backstory="You're working on a SMT line with multiple machines."
                              "You collect information from the machines, such as "
                              "temperature, speed, pressure, component type etc."
                              "Adjust and optimize these parameters based on data and/or feedback from "
                              "other machines or agents."
                              "Detect and report any abnormal or faulty conditions of the machine such as "
                              "jam, error, calibration overdue etc."
                              "Execute corrective actions generated by other agents, such as "
                              "stop, resume, reset, etc.",
                    llm=self.llm,
                    verbose=True
                )
        
    def process_agent(self): 
        return Agent(
                    role="SMT machine expert",
                    goal="Coomunicate with machine and modify machine parameters",
                    backstory="Evaluate and optimize the process performance and "
                              "quality based on the data and the feedback. "
                              "YDetect and diagnose any defects or failures on the PCB "
                              "board within the same process stage, "
                              "such as missing parts, wrong parts, misalignment, etc. "
                              "Generate and propose corrective actions to prevent "
                              "or reduce the defects or failures, "
                              "such as change the machine parameters, stop the line, etc. ",                            
                    llm=self.llm,
                    verbose=True
                )
    
    
    